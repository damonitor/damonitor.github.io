<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on DAMON Project</title>
    <link>https://damonitor.github.io/posts/</link>
    <description>Recent content in Posts on DAMON Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Mar 2025 10:19:49 -0700</lastBuildDate><atom:link href="https://damonitor.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why the heatmap is not showing the expected access patterns?</title>
      <link>https://damonitor.github.io/posts/why_the_heatmap_is_not_showing_the_expected_access_patterns/</link>
      <pubDate>Sun, 16 Mar 2025 10:19:49 -0700</pubDate>
      
      <guid>https://damonitor.github.io/posts/why_the_heatmap_is_not_showing_the_expected_access_patterns/</guid>
      
      <description>TL; DR: try --draw_range all option of damo report heatmap if it shows not what you expected.
damo report heatmap outputs sometimes show no expected access pattern. It is sometimes just entirely black, or shows some access pattern but not what the user expected. This post is for explaining the reason and how you can work around.
The problem usually happens when user tries to draw the heatmap for access pattern that recorded for a virtual address space of a process.</description>
      
    </item>
    
    <item>
      <title>Upcoming feature: Page level peroperties based access monitoring</title>
      <link>https://damonitor.github.io/posts/damon_sz_filter_passed/</link>
      <pubDate>Mon, 23 Dec 2024 11:10:19 -0800</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_sz_filter_passed/</guid>
      
      <description>We&amp;rsquo;re working on making DAMON to be used for page level properties based access monitoring. The idea is to let users describe specific page level properties that are interested in, and provides the size of the type of memory in each regions that DAMON found unique access pattern.
Hence, users can know how much of memory of specific access temperature is having the type. For example, you can know how much of memory that not accessed for more than 20 minutes are having how much file-backed pages of a cgroup.</description>
      
    </item>
    
    <item>
      <title>damo v2.5.7 new features: temperature filtering and formatting</title>
      <link>https://damonitor.github.io/posts/damo_2_5_7_features/</link>
      <pubDate>Mon, 25 Nov 2024 21:12:13 -0800</pubDate>
      
      <guid>https://damonitor.github.io/posts/damo_2_5_7_features/</guid>
      
      <description>damo v2.5.7 is released on 2024-11-25. Two new major features on this version are temperature-based regions filtering and formatting.
Temperature &amp;ldquo;Temperature&amp;rdquo; of each memory region represents relative access hotness of the region. It is calculated as weighted sum of size, access rate (a.k.a nr_accesses) and age of each region. By default, the weights for the three properties are 0, 100, and 100. Users can manually set it using --temperature_weights option.</description>
      
    </item>
    
    <item>
      <title>A guide to DAMON tuning and results interpretation for hot pages</title>
      <link>https://damonitor.github.io/posts/damon_tuning_guide_for_hot_pages/</link>
      <pubDate>Fri, 08 Nov 2024 17:19:32 -0800</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_tuning_guide_for_hot_pages/</guid>
      
      <description>The initial version of this post was initially posted to DAMON mailing list as https://lore.kernel.org/20241108232536.73843-1-sj@kernel.org
Posting it here too, for visibility and after-posting updates for any needs.
One of common issues that I received from DAMON users is that DAMON&amp;rsquo;s monitoring results show hot regions much less than expected. Specifically, the users find regions of only zero or low &amp;rsquo;nr_accesses&amp;rsquo; value from the DAMON-generated access pattern snapshots.
In some cases, it turned out the problem can be alleviated by tuning DAMON parameters or changing the way to interpret the results.</description>
      
    </item>
    
    <item>
      <title>Auto-tuning DAMOS using `damo`</title>
      <link>https://damonitor.github.io/posts/damo_autotune_example/</link>
      <pubDate>Sun, 03 Nov 2024 13:15:24 -0800</pubDate>
      
      <guid>https://damonitor.github.io/posts/damo_autotune_example/</guid>
      
      <description>Starting from Linux v6.9, DAMON provides DAMOS quota auto-tuning. It allows users to set a target metric and value. Then, DAMOS will adjust its aggressiveness (effective quota) to achieve the target.
damo users can also use the feature using --damos_quota_goal option. But apparently the usage is not well documented. Maybe it should be documented somewhere on USAGE.md of damo, but I cannot find a good splot for now. So I&amp;rsquo;m explaining the usage in more informal way on this post.</description>
      
    </item>
    
    <item>
      <title>Creating DAMON logo using DAMON</title>
      <link>https://damonitor.github.io/posts/damon_heatmap_logo/</link>
      <pubDate>Sat, 13 Jul 2024 13:56:02 -0700</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_heatmap_logo/</guid>
      
      <description>I just made a DAMON logo using DAMON, like below.
$ git clone https://github.com/sjp38/masim &amp;amp;&amp;amp; cd masim $ cat damon_pixel_2 11111111 11 11 111111 11111111 11 11 11111111 11111111 1111 11111111 11111111 11 11 11111111 11111111 1111 11111111 $ ./pixels_to_access_config.py ./damon_pixel_2 $((100*1024*1024)) 300 damon.cfg $ sudo damo record &amp;#34;./masim ./configs/stairs.cfg&amp;#34; $ sudo damo report heatmap --output damon.png The output is below:
The cropped one:</description>
      
    </item>
    
    <item>
      <title>DAMON Publications and Presentations</title>
      <link>https://damonitor.github.io/posts/damon_publications_talks/</link>
      <pubDate>Sat, 06 May 2023 12:17:00 -0700</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_publications_talks/</guid>
      
      <description>Below is a list of publications and presentations that cover DAMON project.
This list is not exhaustive and is compiled to the best of our ability, as some publications or presentations may have been made without the knowledge of the DAMON maintainers. If you find a publication or announcement that should be added to this list, please let us know at sj@kernel.org and/or damon@lists.linux.dev.
What to read/cite?
For people who more familiar to academic papers, DAMON papers for Middleware&#39;19 Industry and HPDC&#39;22 are recommended to read and/or cite.</description>
      
    </item>
    
    <item>
      <title>DAMON News List</title>
      <link>https://damonitor.github.io/posts/damon_news/</link>
      <pubDate>Sat, 06 May 2023 11:27:07 -0700</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_news/</guid>
      
      <description>Below is a list of news around DAMON project.
This list is not exhaustive but just a DAMON maintainer&amp;rsquo;s collection of news. If you find a news that should be added to this list, please let us know at sj@kernel.org and/or damon@lists.linux.dev.
2025 2025-04-19: DAMON user-space tool feature for let users program their access pattern visualization in Python code, as a script or interactively on the Python interpreter, is developed.</description>
      
    </item>
    
    <item>
      <title>DAMON-based System Optimization Guide</title>
      <link>https://damonitor.github.io/posts/damon_optimization_guide/</link>
      <pubDate>Sun, 15 Jan 2023 10:36:11 -0800</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_optimization_guide/</guid>
      
      <description>This document helps you estimating the amount of benefit that you could get from DAMON-based system optimizations, and describes how you could achieve it.
Check The Signs No optimization can provide same extent of benefit to every case. Therefore you should first guess how much improvements you could get using DAMON. If some of below conditions match your situation, you could consider using DAMON.
Low IPC and High Cache Miss Ratios.</description>
      
    </item>
    
    <item>
      <title>DAMON Evaluation</title>
      <link>https://damonitor.github.io/posts/damon_evaluation/</link>
      <pubDate>Sun, 15 Jan 2023 10:34:06 -0800</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_evaluation/</guid>
      
      <description>DAMON is lightweight. It increases system memory usage by 0.39% and slows target workloads down by 1.16%.
DAMON is accurate and useful for memory management optimizations. An experimental DAMON-based operation scheme for THP, namely &amp;rsquo;ethp&amp;rsquo;, removes 76.15% of THP memory overheads while preserving 51.25% of THP speedup. Another experimental DAMON-based &amp;lsquo;proactive reclamation&amp;rsquo; implementation, namely &amp;lsquo;prcl&amp;rsquo;, reduces 93.38% of residential sets and 23.63% of system memory footprint while incurring only 1.22% runtime overhead in the best case (parsec3/freqmine).</description>
      
    </item>
    
    <item>
      <title>Summary of DAMON Development in 2022</title>
      <link>https://damonitor.github.io/posts/damon_stat_2022/</link>
      <pubDate>Thu, 29 Dec 2022 19:35:00 -0800</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_stat_2022/</guid>
      
      <description>A summary of DAMON development in 2022 has posted: https://lore.kernel.org/damon/20221229171209.162356-1-sj@kernel.org/
2022 was a year of active and healthy DAMON development.
Seven new DAMON major features were delivered to users. Some of those were featured in articles and academic papers.
It was possible thanks to the DAMON community. The community has expanded with its own mailing list and an open bi-weekly chat series. 40 people contributed their great code to DAMON via making their 275 commits merged into the mainline.</description>
      
    </item>
    
    <item>
      <title>An example of DAMON usage for profiling</title>
      <link>https://damonitor.github.io/posts/damon_profile_callstack_example/</link>
      <pubDate>Thu, 25 Feb 2021 07:20:30 +0100</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_profile_callstack_example/</guid>
      
      <description>I realized I didn&amp;rsquo;t introduce a good, intuitive example use case of DAMON[0] for profiling so far, though DAMON is not for only profiling. One straightforward and realistic usage of DAMON as a profiling tool would be recording the monitoring results with callstack and visualize those by timeline together.
For example, below shows that visualization for a realistic workload, namely &amp;lsquo;fft&amp;rsquo; in SPLASH-2X benchmark suite. The upper-most graph shows how DAMON-detected working set size of the workload (y-axis) changes by time (x-axis).</description>
      
    </item>
    
    <item>
      <title>Tests package for DAMON is released under GPL v2</title>
      <link>https://damonitor.github.io/posts/damon-tests_open_sourced/</link>
      <pubDate>Sat, 26 Sep 2020 08:47:12 +0200</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon-tests_open_sourced/</guid>
      
      <description>DAMON contains a number of tests based on the kselftest and kunit in its patchset itself. As it is preferred to contain only tests having short runtime in kernel tree, I organized time consuming tests in a package and used it in my company only. Tests could be used as a good document and essential for contributors. For the reason, I promised I will make it open source in the last kernel summit talk (https://linuxplumbersconf.</description>
      
    </item>
    
    <item>
      <title>Opening a Showcase Website for DAMON</title>
      <link>https://damonitor.github.io/posts/damon_github_page/</link>
      <pubDate>Tue, 19 May 2020 06:27:47 +0000</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon_github_page/</guid>
      
      <description>A DAMON showcase website[1] is open. There are
the official documentation of DAMON[2], the heatmap format dynamic access pattern of various realistic workloads for heap area[3], mmap()-ed area[4], and stack[5] area, the dynamic working set size distribution[6] and chronological working set size changes[7], and the latest performance test results[8]. [1] https://damonitor.github.io
[2] https://damonitor.github.io/doc/html/latest
[3] https://damonitor.github.io/test/result/visual/latest/heatmap.0.html
[4] https://damonitor.github.io/test/result/visual/latest/heatmap.1.html
[5] https://damonitor.github.io/test/result/visual/latest/heatmap.2.html
[6] https://damonitor.github.io/test/result/visual/latest/wss_sz.html
[7] https://damonitor.github.io/test/result/visual/latest/wss_time.html
[8] https://damonitor.github.io/test/result/perf/latest/html/index.html</description>
      
    </item>
    
    <item>
      <title>DAMON: Data Access Monitor</title>
      <link>https://damonitor.github.io/posts/damon/</link>
      <pubDate>Fri, 27 Dec 2019 18:21:07 +0100</pubDate>
      
      <guid>https://damonitor.github.io/posts/damon/</guid>
      
      <description>With increasingly data-intensive workloads and limited DRAM capacity, optimal memory management based on dynamic access patterns is becoming increasingly important. Such mechanisms are only possible if accurate and efficient dynamic access pattern monitoring is available.
DAMON is a Data Access MONitoring framework subsystem for the Linux kernel developed for such memory management. It is designed with some key mechanism (refer to Design for the detail) that make it
accurate (the monitoring output is useful enough for DRAM level memory management; It might not be appropriate for CPU Cache levels, though), light-weight (the monitoring overhead is low enough to be applied online), and scalable (the upper-bound of the overhead is in constant range regardless of the size of target workloads).</description>
      
    </item>
    
  </channel>
</rss>
